// Automatically generated by MockGen. DO NOT EDIT!
// Source: ./src/service/es_interface.go

package mock_service

import (
	models "github.com/Dataman-Cloud/log-proxy/src/models"
	gomock "github.com/golang/mock/gomock"
)

// Mock of LogSearchService interface
type MockLogSearchService struct {
	ctrl     *gomock.Controller
	recorder *_MockLogSearchServiceRecorder
}

// Recorder for MockLogSearchService (not exported)
type _MockLogSearchServiceRecorder struct {
	mock *MockLogSearchService
}

func NewMockLogSearchService(ctrl *gomock.Controller) *MockLogSearchService {
	mock := &MockLogSearchService{ctrl: ctrl}
	mock.recorder = &_MockLogSearchServiceRecorder{mock}
	return mock
}

func (_m *MockLogSearchService) EXPECT() *_MockLogSearchServiceRecorder {
	return _m.recorder
}

func (_m *MockLogSearchService) Applications(page models.Page) (map[string]int64, error) {
	ret := _m.ctrl.Call(_m, "Applications", page)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLogSearchServiceRecorder) Applications(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Applications", arg0)
}

func (_m *MockLogSearchService) Slots(app string, page models.Page) (map[string]int64, error) {
	ret := _m.ctrl.Call(_m, "Slots", app, page)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLogSearchServiceRecorder) Slots(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Slots", arg0, arg1)
}

func (_m *MockLogSearchService) Tasks(opts map[string]interface{}, page models.Page) (map[string]int64, error) {
	ret := _m.ctrl.Call(_m, "Tasks", opts, page)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLogSearchServiceRecorder) Tasks(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Tasks", arg0, arg1)
}

func (_m *MockLogSearchService) Sources(opts map[string]interface{}, page models.Page) (map[string]int64, error) {
	ret := _m.ctrl.Call(_m, "Sources", opts, page)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLogSearchServiceRecorder) Sources(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Sources", arg0, arg1)
}

func (_m *MockLogSearchService) Search(opts map[string]interface{}, page models.Page) (map[string]interface{}, error) {
	ret := _m.ctrl.Call(_m, "Search", opts, page)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLogSearchServiceRecorder) Search(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Search", arg0, arg1)
}

func (_m *MockLogSearchService) Context(opts map[string]interface{}, page models.Page) ([]map[string]interface{}, error) {
	ret := _m.ctrl.Call(_m, "Context", opts, page)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLogSearchServiceRecorder) Context(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Context", arg0, arg1)
}
